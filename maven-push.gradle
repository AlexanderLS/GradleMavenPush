/*
 * Copyright 2018 Vorlonsoft LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return !getPomVersionName().contains('SNAPSHOT')
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : 'https://oss.sonatype.org/content/repositories/snapshots/'
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ''
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ''
}

def getDoclintCheck() {
    return hasProperty('DOCLINT_CHECK') ? 'true'.equalsIgnoreCase(DOCLINT_CHECK) : false
}

def getJavadocEncoding() {
    return hasProperty('JAVADOC_ENCODING') ? JAVADOC_ENCODING : 'UTF-8'
}

def getJavadocCharSet() {
    return hasProperty('JAVADOC_CHARSET') ? JAVADOC_CHARSET : 'UTF-8'
}

def getPomGroupId() {
    if (hasProperty('GROUP')){
        return GROUP
    } else if ((android.libraryVariants != null) && (android.libraryVariants.size() > 0)){
        return android.libraryVariants[0].applicationId
    } else if ((android.applicationVariants != null) && (android.applicationVariants.size() > 0)){
        return android.applicationVariants[0].applicationId
    } else {
        throw new InvalidUserDataException('You must set GROUP in gradle.properties file.')
    }
}

def getPomArtifactId() {
    if (hasProperty('POM_ARTIFACT_ID')){
        return POM_ARTIFACT_ID
    } else {
        throw new InvalidUserDataException('You must set POM_ARTIFACT_ID in gradle.properties file.')
    }
}

def getPomVersionName() {
    if (hasProperty('VERSION_NAME')){
        return VERSION_NAME
    } else if ( android.defaultConfig.versionName != null){
        return android.defaultConfig.versionName
    } else {
        throw new InvalidUserDataException('You must set VERSION_NAME in gradle.properties file.')
    }
}

def getPomPackaging() {
    if (hasProperty('POM_PACKAGING')){
        return POM_PACKAGING
    } else {
        return 'aar'
    }
}

def getPomName() {
    if (hasProperty('POM_NAME')){
        return POM_NAME
    } else {
        throw new InvalidUserDataException('You must set POM_NAME in gradle.properties file.')
    }
}

def getPomDescription() {
    if (hasProperty('POM_DESCRIPTION')){
        return POM_DESCRIPTION
    } else {
        throw new InvalidUserDataException('You must set POM_DESCRIPTION in gradle.properties file.')
    }
}

def getPomUniqueVersion() {
    return hasProperty('POM_GENERATE_UNIQUE_SNAPSHOTS') ? 'true'.equalsIgnoreCase(POM_GENERATE_UNIQUE_SNAPSHOTS) : true
}

def getPomUrl() {
    if (hasProperty('POM_URL')){
        return POM_URL
    } else {
        throw new InvalidUserDataException('You must set POM_URL in gradle.properties file.')
    }
}

def getPomScmUrl() {
    if (hasProperty('POM_SCM_URL')){
        return POM_SCM_URL
    } else {
        return getPomUrl()
    }
}

def getPomScmConnection() {
    if (hasProperty('POM_SCM_CONNECTION')){
        return POM_SCM_CONNECTION
    } else {
        throw new InvalidUserDataException('You must set POM_SCM_CONNECTION in gradle.properties file.')
    }
}

def getPomScmDevConnection() {
    if (hasProperty('POM_SCM_DEV_CONNECTION')){
        return POM_SCM_DEV_CONNECTION
    } else {
        return getPomScmConnection()
    }
}

def getPomLicenseName() {
    if (hasProperty('POM_LICENCE_NAME')){
        return POM_LICENCE_NAME
    } else {
        throw new InvalidUserDataException('You must set POM_LICENCE_NAME in gradle.properties file.')
    }
}

def getPomLicenseUrl() {
    if (hasProperty('POM_LICENCE_URL')){
        return POM_LICENCE_URL
    } else {
        throw new InvalidUserDataException('You must set POM_LICENCE_URL in gradle.properties file.')
    }
}

def getPomLicenseDist() {
    if (hasProperty('POM_LICENCE_DIST')){
        return POM_LICENCE_DIST
    } else {
        return 'repo'
    }
}

def getOrg() {
    if (hasProperty('POM_ORG')){
        return POM_ORG
    } else {
        return ''
    }
}

def getOrgUrl() {
    if (hasProperty('POM_ORG_URL')){
        return POM_ORG_URL
    } else {
        return ''
    }
}

def getDeveloperId() {
    if (hasProperty('POM_DEVELOPER_ID')){
        return POM_DEVELOPER_ID
    } else {
        throw new InvalidUserDataException('You must set POM_DEVELOPER_ID in gradle.properties file.')
    }
}

def getDeveloperName() {
    if (hasProperty('POM_DEVELOPER_NAME')){
        return POM_DEVELOPER_NAME
    } else {
        throw new InvalidUserDataException('You must set POM_DEVELOPER_NAME in gradle.properties file.')
    }
}

def getDeveloperEmail() {
    if (hasProperty('POM_DEVELOPER_EMAIL')){
        return POM_DEVELOPER_EMAIL
    } else {
        throw new InvalidUserDataException('You must set POM_DEVELOPER_NAME in gradle.properties file.')
    }
}

def getDeveloperOrg() {
    if (hasProperty('POM_DEVELOPER_ORG')){
        return POM_DEVELOPER_ORG
    } else {
        return getOrg()
    }
}

def getDeveloperOrgUrl() {
    if (hasProperty('POM_DEVELOPER_ORG_URL')){
        return POM_DEVELOPER_ORG_URL
    } else {
        return getOrgUrl()
    }
}

def getDeveloperRole() {
    if (hasProperty('POM_DEVELOPER_ROLE')){
        return POM_DEVELOPER_ROLE
    } else {
        return 'developer'
    }
}

afterEvaluate { project ->
    def pomName = getPomName()
    def pomPackaging = getPomPackaging()
    def pomDescription = getPomDescription()
    def pomUniqueVersion = getPomUniqueVersion()
    def pomUrl = getPomUrl()
    def pomScmUrl = getPomScmUrl()
    def pomScmConnection = getPomScmConnection()
    def pomScmDevConnection = getPomScmDevConnection()
    def pomLicenseName = getPomLicenseName()
    def pomLicenseUrl = getPomLicenseUrl()
    def pomDistribution = getPomLicenseDist()
    def pomOrg = getOrg()
    def pomOrgUrl = getOrgUrl()
    def pomDeveloperId = getDeveloperId()
    def pomDeveloperName = getDeveloperName()
    def pomDeveloperEmail = getDeveloperEmail()
    def pomDeveloperOrg = getDeveloperOrg()
    def pomDeveloperOrgUrl = getDeveloperOrgUrl()
    def pomDeveloperRole = getDeveloperRole()

    signing {
        required {
            isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives')
        }
        sign configurations.archives
    }

    uploadArchives {
        description 'Deploys the artifacts to the Maven Central repository.'
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                pom.groupId = getPomGroupId()
                pom.artifactId = getPomArtifactId()
                pom.version = getPomVersionName()

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name pomName
                    packaging pomPackaging
                    description pomDescription
                    uniqueVersion = pomUniqueVersion
                    url pomUrl

                    scm {
                        url pomScmUrl
                        connection pomScmConnection
                        developerConnection pomScmDevConnection
                    }

                    licenses {
                        license {
                            name pomLicenseName
                            url pomLicenseUrl
                            distribution pomDistribution
                        }
                    }

                    organization {
                        name pomOrg
                        url pomOrgUrl
                    }

                    developers {
                        developer {
                            id pomDeveloperId
                            name pomDeveloperName
                            email pomDeveloperEmail
                            organization = pomDeveloperOrg // Workaround for https://github.com/gradle/gradle/issues/886
                            organizationUrl pomDeveloperOrgUrl
                            roles {
                                role pomDeveloperRole
                            }
                        }
                    }
                }
            }
        }
    }

    task installArchives(type: Upload) {
        description 'Deploys the artifacts to the local Maven repository.'
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                pom.groupId = getPomGroupId()
                pom.artifactId = getPomArtifactId()
                pom.version = getPomVersionName()

                repository url: "file://${System.properties['user.home']}/.m2/repository"

                pom.project {
                    name pomName
                    packaging pomPackaging
                    description pomDescription
                    uniqueVersion = pomUniqueVersion
                    url pomUrl

                    scm {
                        url pomScmUrl
                        connection pomScmConnection
                        developerConnection pomScmDevConnection
                    }

                    licenses {
                        license {
                            name pomLicenseName
                            url pomLicenseUrl
                            distribution pomDistribution
                        }
                    }

                    organization {
                        name pomOrg
                        url pomOrgUrl
                    }

                    developers {
                        developer {
                            id pomDeveloperId
                            name pomDeveloperName
                            email pomDeveloperEmail
                            organization = pomDeveloperOrg // Workaround for https://github.com/gradle/gradle/issues/886
                            organizationUrl pomDeveloperOrgUrl
                            roles {
                                role pomDeveloperRole
                            }
                        }
                    }
                }
            }
        }
    }

    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')     ||
            project.getPlugins().hasPlugin('android')                 ||
            project.getPlugins().hasPlugin('android-library')) {
        task install(type: Upload, dependsOn: assemble) {
            description 'Installs the artifacts to the local Maven repository.'
            repositories {
                mavenInstaller {
                    configuration = configurations.archives

                    pom.groupId = getPomGroupId()
                    pom.artifactId = getPomArtifactId()
                    pom.version = getPomVersionName()

                    pom.project {
                        name pomName
                        packaging pomPackaging
                        description pomDescription
                        url pomUrl

                        scm {
                            url pomScmUrl
                            connection pomScmConnection
                            developerConnection pomScmDevConnection
                        }

                        licenses {
                            license {
                                name pomLicenseName
                                url pomLicenseUrl
                                distribution pomDistribution
                            }
                        }

                        organization {
                            name pomOrg
                            url pomOrgUrl
                        }

                        developers {
                            developer {
                                id pomDeveloperId
                                name pomDeveloperName
                                email pomDeveloperEmail
                                organization = pomDeveloperOrg // Workaround for https://github.com/gradle/gradle/issues/886
                                organizationUrl pomDeveloperOrgUrl
                                roles {
                                    role pomDeveloperRole
                                }
                            }
                        }
                    }
                }
            }
        }

        task androidJavadocs(type: Javadoc) {
            failOnError = false
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }
    } else {
        install {
            description 'Installs the artifacts to the local Maven repository.'
            repositories {
                mavenInstaller {
                    pom.groupId = getPomGroupId()
                    pom.artifactId = getPomArtifactId()
                    pom.version = getPomVersionName()

                    pom.project {
                        name pomName
                        packaging pomPackaging
                        description pomDescription
                        url pomUrl

                        scm {
                            url pomScmUrl
                            connection pomScmConnection
                            developerConnection pomScmDevConnection
                        }

                        licenses {
                            license {
                                name pomLicenseName
                                url pomLicenseUrl
                                distribution pomDistribution
                            }
                        }

                        organization {
                            name pomOrg
                            url pomOrgUrl
                        }

                        developers {
                            developer {
                                id pomDeveloperId
                                name pomDeveloperName
                                email pomDeveloperEmail
                                organization = pomDeveloperOrg // Workaround for https://github.com/gradle/gradle/issues/886
                                organizationUrl pomDeveloperOrgUrl
                                roles {
                                    role pomDeveloperRole
                                }
                            }
                        }
                    }
                }
            }
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        task sourcesJar(type: Jar, dependsOn:classes) {
            classifier = 'sources'
            from sourceSets.main.java.sourceFiles
        }
    }

    artifacts {
        if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')     ||
            project.getPlugins().hasPlugin('android')                 ||
            project.getPlugins().hasPlugin('android-library')) {
            archives androidSourcesJar
            archives androidJavadocsJar
        } else {
            archives sourcesJar
            archives javadocJar
        }
    }

    tasks.withType(Javadoc).all {
        options.encoding = getJavadocEncoding()
        options.charSet = getJavadocCharSet()
        options.author = true
        options.version = true
        if (!getDoclintCheck() && JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}