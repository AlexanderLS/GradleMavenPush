/*
 * Copyright 2018 Vorlonsoft LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isJCenter() {
    return (hasProperty('IS_JCENTER') && 'true'.equalsIgnoreCase(IS_JCENTER))
}

def isAndroid() {
    if (project.getPlugins().hasPlugin('com.android.application') ||
        project.getPlugins().hasPlugin('com.android.library')     ||
        project.getPlugins().hasPlugin('android')                 ||
        project.getPlugins().hasPlugin('android-library')) {
        return true
    } else {
        return false
    }
}

def isReleaseBuild() {
    return !getPomVersionName().contains('SNAPSHOT')
}

def getReleaseRepositoryUrl() {
    if (hasProperty('RELEASE_REPOSITORY_URL')) {
        return RELEASE_REPOSITORY_URL
    } else if (isJCenter()) {
        // https://bintray.com/api/v1/maven/{NEXUS_USERNAME}/maven/{POM_ARTIFACT_ID}/;publish=1
        return 'https://bintray.com/api/v1/maven/' +
                getRepositoryUsername() +
               '/maven/' +
                getPomArtifactUrl() +
               '/;publish=1'
    } else {
        return 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    }
}

def getSnapshotRepositoryUrl() {
    if (hasProperty('SNAPSHOT_REPOSITORY_URL')) {
        return SNAPSHOT_REPOSITORY_URL
    } else if (isJCenter()) {
        return 'https://oss.jfrog.org/artifactory/oss-snapshot-local/'
    } else {
        return 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

def getRepositoryUsername() {
    if (System.getenv().containsKey('NEXUS_USERNAME')) {
        return System.getenv('NEXUS_USERNAME')
    } else {
        return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ''
    }
}

def getRepositoryPassword() {
    if (System.getenv().containsKey('NEXUS_PASSWORD')) {
        return System.getenv('NEXUS_PASSWORD')
    } else {
        return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ''
    }
}

def getApklibArtifact() {
    return hasProperty('APKLIB_ARTIFACT') ? 'true'.equalsIgnoreCase(APKLIB_ARTIFACT) : false
}

def getDoclintCheck() {
    return hasProperty('DOCLINT_CHECK') ? 'true'.equalsIgnoreCase(DOCLINT_CHECK) : false
}

def getJavadocEncoding() {
    return hasProperty('JAVADOC_ENCODING') ? JAVADOC_ENCODING : 'UTF-8'
}

def getJavadocDocEncoding() {
    return hasProperty('JAVADOC_DOC_ENCODING') ? JAVADOC_DOC_ENCODING : 'UTF-8'
}

def getJavadocCharSet() {
    return hasProperty('JAVADOC_CHARSET') ? JAVADOC_CHARSET : 'UTF-8'
}

def getPomGroupId() {
    if (hasProperty('GROUP')){
        return GROUP
    } else if ((android.libraryVariants != null) && (android.libraryVariants.size() > 0)){
        return android.libraryVariants[0].applicationId
    } else if ((android.applicationVariants != null) && (android.applicationVariants.size() > 0)){
        return android.applicationVariants[0].applicationId
    } else {
        throw new InvalidUserDataException('You must set GROUP in gradle.properties file.')
    }
}

def getPomArtifactId() {
    if (hasProperty('POM_ARTIFACT_ID')){
        return POM_ARTIFACT_ID
    } else {
        throw new InvalidUserDataException('You must set POM_ARTIFACT_ID in gradle.properties file.')
    }
}

def getPomArtifactUrl() {
    return hasProperty('POM_ARTIFACT_URL') ? POM_ARTIFACT_URL : getPomArtifactId()
}

def getPomVersionName() {
    def versionNameExtras = (System.getenv().containsKey('VERSION_NAME_EXTRAS')) ? System.getenv('VERSION_NAME_EXTRAS') : ''
    if (hasProperty('VERSION_NAME')){
        return VERSION_NAME + versionNameExtras
    } else if (android.defaultConfig.versionName != null){
        return android.defaultConfig.versionName + versionNameExtras
    } else {
        throw new InvalidUserDataException('You must set VERSION_NAME in gradle.properties file.')
    }
}

def getPomPackaging() {
    if (hasProperty('POM_PACKAGING')){
        return POM_PACKAGING
    } else if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')     ||
            project.getPlugins().hasPlugin('android')                 ||
            project.getPlugins().hasPlugin('android-library')) {
        return 'aar'
    } else {
        return 'jar'
    }
}

def getPomName() {
    if (hasProperty('POM_NAME')){
        return POM_NAME
    } else {
        throw new InvalidUserDataException('You must set POM_NAME in gradle.properties file.')
    }
}

def getPomDescription() {
    if (hasProperty('POM_DESCRIPTION')){
        return POM_DESCRIPTION
    } else {
        throw new InvalidUserDataException('You must set POM_DESCRIPTION in gradle.properties file.')
    }
}

def getPomUniqueVersion() {
    return hasProperty('POM_GENERATE_UNIQUE_SNAPSHOTS') ? 'true'.equalsIgnoreCase(POM_GENERATE_UNIQUE_SNAPSHOTS) : true
}

def getPomUrl() {
    if (hasProperty('POM_URL')){
        return POM_URL
    } else {
        throw new InvalidUserDataException('You must set POM_URL in gradle.properties file.')
    }
}

def getPomInceptionYear() {
    if (hasProperty('POM_INCEPTION_YEAR')){
        return POM_INCEPTION_YEAR
    } else {
        return ''
    }
}

def getPomScmUrl() {
    if (hasProperty('POM_SCM_URL')){
        return POM_SCM_URL
    } else {
        return getPomUrl()
    }
}

def getPomScmConnection() {
    if (hasProperty('POM_SCM_CONNECTION')){
        return POM_SCM_CONNECTION
    } else {
        throw new InvalidUserDataException('You must set POM_SCM_CONNECTION in gradle.properties file.')
    }
}

def getPomScmDevConnection() {
    if (hasProperty('POM_SCM_DEV_CONNECTION')){
        return POM_SCM_DEV_CONNECTION
    } else {
        return getPomScmConnection()
    }
}

def getPomScmTag() {
    if (hasProperty('POM_SCM_TAG')){
        return POM_SCM_TAG
    } else {
        return 'HEAD'
    }
}

def getPomLicenseName() {
    if (hasProperty('POM_LICENCE_NAME')){
        return POM_LICENCE_NAME
    } else {
        throw new InvalidUserDataException('You must set POM_LICENCE_NAME in gradle.properties file.')
    }
}

def getPomLicenseUrl() {
    if (hasProperty('POM_LICENCE_URL')){
        return POM_LICENCE_URL
    } else {
        throw new InvalidUserDataException('You must set POM_LICENCE_URL in gradle.properties file.')
    }
}

def getPomLicenseDist() {
    if (hasProperty('POM_LICENCE_DIST')){
        return POM_LICENCE_DIST
    } else {
        return 'repo'
    }
}

def getPomLicenseComments() {
    if (hasProperty('POM_LICENCE_COMMENTS')){
        return POM_LICENCE_COMMENTS
    } else {
        return ''
    }
}

def getOrg() {
    if (hasProperty('POM_ORG')){
        return POM_ORG
    } else {
        return ''
    }
}

def getOrgUrl() {
    if (hasProperty('POM_ORG_URL')){
        return POM_ORG_URL
    } else {
        return ''
    }
}

def getDeveloperId() {
    if (hasProperty('POM_DEVELOPER_ID')){
        return POM_DEVELOPER_ID
    } else {
        throw new InvalidUserDataException('You must set POM_DEVELOPER_ID in gradle.properties file.')
    }
}

def getDeveloperName() {
    if (hasProperty('POM_DEVELOPER_NAME')){
        return POM_DEVELOPER_NAME
    } else {
        throw new InvalidUserDataException('You must set POM_DEVELOPER_NAME in gradle.properties file.')
    }
}

def getDeveloperEmail() {
    if (hasProperty('POM_DEVELOPER_EMAIL')){
        return POM_DEVELOPER_EMAIL
    } else {
        return 'lazy-developer-who-does-not-read-readme@example.com'
    }
}

def getDeveloperUrl() {
    if (hasProperty('POM_DEVELOPER_URL')){
        return POM_DEVELOPER_URL
    } else {
        return ''
    }
}

def getDeveloperOrg() {
    if (hasProperty('POM_DEVELOPER_ORG')){
        return POM_DEVELOPER_ORG
    } else {
        return getOrg()
    }
}

def getDeveloperOrgUrl() {
    if (hasProperty('POM_DEVELOPER_ORG_URL')){
        return POM_DEVELOPER_ORG_URL
    } else {
        return getOrgUrl()
    }
}

def getDeveloperRoles() {
    if (hasProperty('POM_DEVELOPER_ROLES')){
        return getProperty('POM_DEVELOPER_ROLES').split(',')
    } else if (hasProperty('POM_DEVELOPER_ROLE')){
        return [POM_DEVELOPER_ROLE]
    } else {
        return ['Software Developer']
    }
}

def getDeveloperTimezone() {
    if (hasProperty('POM_DEVELOPER_TIMEZONE')){
        return POM_DEVELOPER_TIMEZONE
    } else {
        return ''
    }
}

def getDevelopers() {
    if (hasProperty('POM_DEVELOPERS')){
        return getProperty('POM_DEVELOPERS').split(',')
    } else {
        return ['']
    }
}

def getContributors() {
    if (hasProperty('POM_CONTRIBUTORS')){
        return getProperty('POM_CONTRIBUTORS').split(',')
    } else {
        return ['']
    }
}

def getIssueSystem() {
    if (hasProperty('POM_ISSUE_SYSTEM')){
        return POM_ISSUE_SYSTEM
    } else {
        return ''
    }
}

def getIssueSystemUrl() {
    if (hasProperty('POM_ISSUE_SYSTEM_URL')){
        return POM_ISSUE_SYSTEM_URL
    } else {
        return ''
    }
}

def getCiSystem() {
    if (hasProperty('POM_CI_SYSTEM')){
        return POM_CI_SYSTEM
    } else {
        return ''
    }
}

def getCiSystemUrl() {
    if (hasProperty('POM_CI_SYSTEM_URL')){
        return POM_CI_SYSTEM_URL
    } else {
        return ''
    }
}

def getMailingLists() {
    if (hasProperty('POM_MAILING_LISTS')){
        return getProperty('POM_MAILING_LISTS').split(',')
    } else {
        return ['']
    }
}

def getJavaAPISpecificationLink() {
    if (JavaVersion.current().isJava10Compatible()){
        return 'https://docs.oracle.com/javase/10/docs/api/overview-summary.html'
    } else if (JavaVersion.current().isJava9()){
        return 'https://docs.oracle.com/javase/9/docs/api/overview-summary.html'
    } else if (JavaVersion.current().isJava8()){
        return 'https://docs.oracle.com/javase/8/docs/api/'
    } else if (JavaVersion.current().isJava7()){
        return 'https://docs.oracle.com/javase/7/docs/api/'
    } else if (JavaVersion.current().isJava6()){
        return 'https://docs.oracle.com/javase/6/docs/api/'
    } else if (JavaVersion.current().isJava5()){
        return 'https://docs.oracle.com/javase/1.5.0/docs/api/'
    } else {
        return ''
    }
}

afterEvaluate { project ->
    def pomName = getPomName()
    def pomPackaging = getPomPackaging()
    def pomDescription = getPomDescription()
    def pomUniqueVersion = getPomUniqueVersion()
    def pomUrl = getPomUrl()
    def pomInceptionYear = getPomInceptionYear()
    def pomScmUrl = getPomScmUrl()
    def pomScmConnection = getPomScmConnection()
    def pomScmDevConnection = getPomScmDevConnection()
    def pomScmTag = getPomScmTag()
    def pomLicenseName = getPomLicenseName()
    def pomLicenseUrl = getPomLicenseUrl()
    def pomDistribution = getPomLicenseDist()
    def pomLicenseComments = getPomLicenseComments()
    def pomOrg = getOrg()
    def pomOrgUrl = getOrgUrl()
    def pomDeveloperId = getDeveloperId()
    def pomDeveloperName = getDeveloperName()
    def pomDeveloperEmail = getDeveloperEmail()
    def pomDeveloperUrl = getDeveloperUrl()
    def pomDeveloperOrg = getDeveloperOrg()
    def pomDeveloperOrgUrl = getDeveloperOrgUrl()
    def pomDeveloperRoles = getDeveloperRoles()
    def pomDeveloperTimezone = getDeveloperTimezone()
    def pomDevelopers = getDevelopers()
    def pomContributors = getContributors()
    def pomIssueSystem = getIssueSystem()
    def pomIssueSystemUrl = getIssueSystemUrl()
    def pomCiSystem = getCiSystem()
    def pomCiSystemUrl = getCiSystemUrl()
    def pomMailingLists = getMailingLists()
    def pomConfig = {
        packaging pomPackaging
        name pomName
        description pomDescription
        url pomUrl
        if (!''.equals(pomInceptionYear)) {
            inceptionYear pomInceptionYear
        }

        if (!''.equals(pomOrg) || !''.equals(pomOrgUrl)) {
            organization {
                if (!''.equals(pomOrg)) {
                    name pomOrg
                }
                if (!''.equals(pomOrgUrl)) {
                    url pomOrgUrl
                }
            }
        }

        licenses {
            license {
                name pomLicenseName
                url pomLicenseUrl
                distribution pomDistribution
                if (!''.equals(pomLicenseComments)) {
                    comments pomLicenseComments
                }
            }
        }

        developers {
            developer {
                id pomDeveloperId
                name pomDeveloperName
                email pomDeveloperEmail
                if (!''.equals(pomDeveloperUrl)) {
                    url pomDeveloperUrl
                }
                if (!''.equals(pomDeveloperOrg)) {
                    organization pomDeveloperOrg // Workaround for https://github.com/gradle/gradle/issues/886
                }
                if (!''.equals(pomDeveloperOrgUrl)) {
                    organizationUrl pomDeveloperOrgUrl
                }
                if (pomDeveloperRoles.size() > 0) {
                    roles {
                        for (int i = 0; i < pomDeveloperRoles.size(); i++) {
                            role pomDeveloperRoles[i]
                        }
                    }
                }
                if (!''.equals(pomDeveloperTimezone)) {
                    timezone pomDeveloperTimezone
                }
            }
            for (int i = 0; i + 2 < pomDevelopers.size(); i+=3) {
                developer {
                    id pomDevelopers[i]
                    name pomDevelopers[i+1]
                    email pomDevelopers[i+2]
                }
            }
        }

        if (pomContributors.size() > 1) {
            contributors {
                for (int i = 0; i + 1 < pomContributors.size(); i+=2) {
                    contributor {
                        name pomContributors[i]
                        email pomContributors[i+1]
                    }
                }
            }
        }

        if (!''.equals(pomIssueSystem) || !''.equals(pomIssueSystemUrl)) {
            issueManagement {
                if (!''.equals(pomIssueSystem)) {
                    system pomIssueSystem
                }
                if (!''.equals(pomIssueSystemUrl)) {
                    url pomIssueSystemUrl
                }
            }
        }

        if (!''.equals(pomCiSystem) || !''.equals(pomCiSystemUrl)) {
            ciManagement {
                if (!''.equals(pomCiSystem)) {
                    system pomCiSystem
                }
                if (!''.equals(pomCiSystemUrl)) {
                    url pomCiSystemUrl
                }
            }
        }

        if (pomMailingLists.size() > 2) {
            mailingLists {
                for (int i = 0; i + 2 < pomMailingLists.size(); i+=3) {
                    mailingList {
                        name pomMailingLists[i]
                        subscribe pomMailingLists[i+1]
                        unsubscribe pomMailingLists[i+2]
                    }
                }
            }
        }

        scm {
            connection pomScmConnection
            developerConnection pomScmDevConnection
            tag pomScmTag
            url pomScmUrl
        }
    }

    signing {
        required {
            isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives')
        }
        sign configurations.archives
    }

    uploadArchives {
        description 'Deploys the artifacts to the Maven Central repository.'
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                pom.groupId = getPomGroupId()
                pom.artifactId = getPomArtifactId()
                pom.version = getPomVersionName()

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    uniqueVersion = pomUniqueVersion
                }

                pom.withXml {
                    def root = asNode()
                    root.children().last() + pomConfig
                }
            }
        }
    }

    task installArchives(type: Upload) {
        description 'Deploys the artifacts to the local Maven repository.'
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                pom.groupId = getPomGroupId()
                pom.artifactId = getPomArtifactId()
                pom.version = getPomVersionName()

                repository url: "file://${System.properties['user.home']}/.m2/repository"

                pom.project {
                    uniqueVersion = pomUniqueVersion
                }

                pom.withXml {
                    def root = asNode()
                    root.children().last() + pomConfig
                }
            }
        }
    }

    if (isAndroid()) {
        task install(type: Upload, dependsOn: assemble) {
            description 'Installs the artifacts to the local Maven repository.'
            repositories {
                mavenInstaller {
                    configuration = configurations.archives

                    pom.groupId = getPomGroupId()
                    pom.artifactId = getPomArtifactId()
                    pom.version = getPomVersionName()

                    pom.withXml {
                        def root = asNode()
                        root.children().last() + pomConfig
                    }
                }
            }
        }

        if (getApklibArtifact()) {
            task apklib(type: Zip) {
                appendix = extension = 'apklib'

                from 'AndroidManifest.xml'
                into('res') {
                    from 'res'
                }
                into('src') {
                    from 'src'
                }
            }
        }

        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            options {
                linksOffline 'http://d.android.com/reference/', "${android.sdkDirectory}/docs/reference/"
            }
            failOnError = false
            exclude '**/*.kt', '**/R.html', '**/R.*.html'
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }

        artifacts {
            if (getApklibArtifact()) {
                archives apklib
            }
            archives androidJavadocsJar
            archives androidSourcesJar
        }
    } else {
        install {
            description 'Installs the artifacts to the local Maven repository.'
            repositories {
                mavenInstaller {
                    pom.groupId = getPomGroupId()
                    pom.artifactId = getPomArtifactId()
                    pom.version = getPomVersionName()

                    pom.withXml {
                        def root = asNode()
                        root.children().last() + pomConfig
                    }
                }
            }
        }

        task coreJavadoc(type: Javadoc) {
            source = sourceSets.main.java.srcDirs
            failOnError = false
            exclude '**/*.kt'
        }

        task javadocJar(type: Jar, dependsOn: coreJavadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar
            archives sourcesJar
        }
    }

    tasks.withType(Javadoc).all {
        options.encoding = getJavadocEncoding()
        options.docEncoding = getJavadocDocEncoding()
        options.charSet = getJavadocCharSet()
        options.author = true
        options.version = true
        options.addStringOption('link', getJavaAPISpecificationLink())
        if (JavaVersion.current().isJava8Compatible()) {
            if (isAndroid()) {
                /* JDK 1.8 has a bug that requires the rt.jar file to be
                   in the bootclasspath (https://stackoverflow.com/a/30458820). */
                options.bootClasspath = [file("${System.properties['java.home']}/jre/lib/rt.jar")] + android.bootClasspath
            }
            if (!getDoclintCheck()) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}