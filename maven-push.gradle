/*
 * Copyright 2018 Vorlonsoft LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isJCenter() {
    return (hasProperty('IS_JCENTER') && 'true'.equalsIgnoreCase(IS_JCENTER))
}

def isAndroid() {
    return getPlugins().hasPlugin('com.android.application') ||
           getPlugins().hasPlugin('com.android.library') ||
           getPlugins().hasPlugin('android') ||
           getPlugins().hasPlugin('android-library')
}

def isKotlin() {
    return getPlugins().hasPlugin('kotlin') ||
           getPlugins().hasPlugin('kotlin-android') ||
           getPlugins().hasPlugin('kotlin-android-extensions')
}

def isDokkaPlugin() {
    return getPlugins().hasPlugin('org.jetbrains.dokka-android') ||
           getPlugins().hasPlugin('org.jetbrains.dokka')
}

def isReleaseBuild() {
    return !getPomVersionName().contains('SNAPSHOT')
}

def getReleaseRepositoryUrl() {
    if (hasProperty('RELEASE_REPOSITORY_URL')) {
        return RELEASE_REPOSITORY_URL
    } else if (isJCenter()) {
        // https://bintray.com/api/v1/maven/{NEXUS_USERNAME}/maven/{POM_ARTIFACT_ID}/;publish=1
        return 'https://bintray.com/api/v1/maven/' +
                getRepositoryUsername() +
                '/maven/' +
                getPomArtifactUrl() +
                '/;publish=1'
    } else {
        return 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    }
}

def getSnapshotRepositoryUrl() {
    if (hasProperty('SNAPSHOT_REPOSITORY_URL')) {
        return SNAPSHOT_REPOSITORY_URL
    } else if (isJCenter()) {
        return 'https://oss.jfrog.org/artifactory/oss-snapshot-local/'
    } else {
        return 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

def getRepositoryUsername() {
    if (System.getenv().containsKey('NEXUS_USERNAME')) {
        return System.getenv('NEXUS_USERNAME')
    } else {
        return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ''
    }
}

def getRepositoryPassword() {
    if (System.getenv().containsKey('NEXUS_PASSWORD')) {
        return System.getenv('NEXUS_PASSWORD')
    } else {
        return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ''
    }
}

def getApklibArtifact() {
    return hasProperty('APKLIB_ARTIFACT') ? 'true'.equalsIgnoreCase(APKLIB_ARTIFACT) : false
}

def isDokka() {
    return hasProperty('JAVADOC_BY_DOKKA') ? 'true'.equalsIgnoreCase(JAVADOC_BY_DOKKA) : false
}

def getDoclintCheck() {
    return hasProperty('DOCLINT_CHECK') ? 'true'.equalsIgnoreCase(DOCLINT_CHECK) : false
}

def getJavadocEncoding() {
    return hasProperty('JAVADOC_ENCODING') ? JAVADOC_ENCODING : 'UTF-8'
}

def getJavadocDocEncoding() {
    return hasProperty('JAVADOC_DOC_ENCODING') ? JAVADOC_DOC_ENCODING : 'UTF-8'
}

def getJavadocCharSet() {
    return hasProperty('JAVADOC_CHARSET') ? JAVADOC_CHARSET : 'UTF-8'
}

/**
 * HTML version in the document comments.
 *
 * @return boolean true if HTML version in the document comments is 5, false if something else.
 */
def isHtml5() {
    return hasProperty('JAVADOC_HTML_VERSION') ? (JAVADOC_HTML_VERSION == '5') : false
}

def getPomGroupId() {
    if (hasProperty('GROUP')) {
        return GROUP
    } else if ((android.libraryVariants != null) && (android.libraryVariants.size() > 0)) {
        return android.libraryVariants[0].applicationId
    } else if ((android.applicationVariants != null) && (android.applicationVariants.size() > 0)) {
        return android.applicationVariants[0].applicationId
    } else {
        throw new InvalidUserDataException('You must set GROUP in gradle.properties file.')
    }
}

def getPomArtifactId() {
    if (hasProperty('POM_ARTIFACT_ID')) {
        return POM_ARTIFACT_ID
    } else {
        throw new InvalidUserDataException('You must set POM_ARTIFACT_ID in gradle.properties file.')
    }
}

def getPomArtifactUrl() {
    return hasProperty('POM_ARTIFACT_URL') ? POM_ARTIFACT_URL : getPomArtifactId()
}

def getPomVersionName() {
    def versionNameExtras = (System.getenv().containsKey('VERSION_NAME_EXTRAS')) ? System.getenv('VERSION_NAME_EXTRAS') : ''
    if (hasProperty('VERSION_NAME')) {
        return VERSION_NAME + versionNameExtras
    } else if (android.defaultConfig.versionName != null) {
        return android.defaultConfig.versionName + versionNameExtras
    } else {
        throw new InvalidUserDataException('You must set VERSION_NAME in gradle.properties file.')
    }
}

def getPomPackaging() {
    if (hasProperty('POM_PACKAGING')) {
        return POM_PACKAGING
    } else {
        return isAndroid() ? 'aar' : 'jar'
    }
}

def getPomName() {
    if (hasProperty('POM_NAME')) {
        return POM_NAME
    } else {
        throw new InvalidUserDataException('You must set POM_NAME in gradle.properties file.')
    }
}

def getPomDescription() {
    if (hasProperty('POM_DESCRIPTION')) {
        return POM_DESCRIPTION
    } else {
        throw new InvalidUserDataException('You must set POM_DESCRIPTION in gradle.properties file.')
    }
}

def getPomUniqueVersion() {
    return hasProperty('POM_GENERATE_UNIQUE_SNAPSHOTS') ? 'true'.equalsIgnoreCase(POM_GENERATE_UNIQUE_SNAPSHOTS) : true
}

def getPomUrl() {
    if (hasProperty('POM_URL')) {
        return POM_URL
    } else {
        throw new InvalidUserDataException('You must set POM_URL in gradle.properties file.')
    }
}

def getPomInceptionYear() {
    return hasProperty('POM_INCEPTION_YEAR') ? POM_INCEPTION_YEAR : ''
}

def getPomScmUrl() {
    return hasProperty('POM_SCM_URL') ? POM_SCM_URL : getPomUrl()
}

def getPomScmConnection() {
    if (hasProperty('POM_SCM_CONNECTION')) {
        return POM_SCM_CONNECTION
    } else {
        throw new InvalidUserDataException('You must set POM_SCM_CONNECTION in gradle.properties file.')
    }
}

def getPomScmDevConnection() {
    return hasProperty('POM_SCM_DEV_CONNECTION') ? POM_SCM_DEV_CONNECTION : getPomScmConnection()
}

def getPomScmTag() {
    return hasProperty('POM_SCM_TAG') ? POM_SCM_TAG : 'HEAD'
}

def getPomLicenseName() {
    if (hasProperty('POM_LICENCE_NAME')) {
        return POM_LICENCE_NAME
    } else {
        throw new InvalidUserDataException('You must set POM_LICENCE_NAME in gradle.properties file.')
    }
}

def getPomLicenseUrl() {
    if (hasProperty('POM_LICENCE_URL')) {
        return POM_LICENCE_URL
    } else {
        throw new InvalidUserDataException('You must set POM_LICENCE_URL in gradle.properties file.')
    }
}

def getPomLicenseDist() {
    return hasProperty('POM_LICENCE_DIST') ? POM_LICENCE_DIST : 'repo'
}

def getPomLicenseComments() {
    return hasProperty('POM_LICENCE_COMMENTS') ? POM_LICENCE_COMMENTS : ''
}

def getOrg() {
    return hasProperty('POM_ORG') ? POM_ORG : ''
}

def getOrgUrl() {
    return hasProperty('POM_ORG_URL') ? POM_ORG_URL : ''
}

def getDeveloperId() {
    if (hasProperty('POM_DEVELOPER_ID')) {
        return POM_DEVELOPER_ID
    } else {
        throw new InvalidUserDataException('You must set POM_DEVELOPER_ID in gradle.properties file.')
    }
}

def getDeveloperName() {
    if (hasProperty('POM_DEVELOPER_NAME')) {
        return POM_DEVELOPER_NAME
    } else {
        throw new InvalidUserDataException('You must set POM_DEVELOPER_NAME in gradle.properties file.')
    }
}

def getDeveloperEmail() {
    return hasProperty('POM_DEVELOPER_EMAIL') ? POM_DEVELOPER_EMAIL : 'lazy-developer-who-does-not-read-readme@example.com'
}

def getDeveloperUrl() {
    return hasProperty('POM_DEVELOPER_URL') ? POM_DEVELOPER_URL : ''
}

def getDeveloperOrg() {
    return hasProperty('POM_DEVELOPER_ORG') ? POM_DEVELOPER_ORG : getOrg()
}

def getDeveloperOrgUrl() {
    return hasProperty('POM_DEVELOPER_ORG_URL') ? POM_DEVELOPER_ORG_URL : getOrgUrl()
}

def getDeveloperRoles() {
    if (hasProperty('POM_DEVELOPER_ROLES')) {
        if (hasProperty('POM_DEVELOPER_ROLE')) {
            def developerRoles = getProperty('POM_DEVELOPER_ROLE') + ',' + getProperty('POM_DEVELOPER_ROLES')
            return developerRoles.split(',')
        } else {
            return getProperty('POM_DEVELOPER_ROLES').split(',')
        }
    } else {
        return hasProperty('POM_DEVELOPER_ROLE') ? [POM_DEVELOPER_ROLE] : ['Software Developer']
    }
}

def getDeveloperTimezone() {
    return hasProperty('POM_DEVELOPER_TIMEZONE') ? POM_DEVELOPER_TIMEZONE : ''
}

def getDevelopers() {
    return hasProperty('POM_DEVELOPERS') ? getProperty('POM_DEVELOPERS').split(',') : ['']
}

def getContributors() {
    return hasProperty('POM_CONTRIBUTORS') ? getProperty('POM_CONTRIBUTORS').split(',') : ['']
}

def getIssueSystem() {
    return hasProperty('POM_ISSUE_SYSTEM') ?  POM_ISSUE_SYSTEM : ''
}

def getIssueSystemUrl() {
    return hasProperty('POM_ISSUE_SYSTEM_URL') ? POM_ISSUE_SYSTEM_URL : ''
}

def getCiSystem() {
    return hasProperty('POM_CI_SYSTEM') ? POM_CI_SYSTEM : ''
}

def getCiSystemUrl() {
    return hasProperty('POM_CI_SYSTEM_URL') ? POM_CI_SYSTEM_URL : ''
}

def getMailingLists() {
    return hasProperty('POM_MAILING_LISTS') ? getProperty('POM_MAILING_LISTS').split(',') : ['']
}

def getRepositories() {
    if (isReleaseBuild()) {
        return hasProperty('POM_REPOSITORIES') ? getProperty('POM_REPOSITORIES').split(',') : ['']
    } else {
        if (hasProperty('POM_SNAPSHOT_REPOSITORIES')) {
            return getProperty('POM_SNAPSHOT_REPOSITORIES').split(',')
        } else {
            return hasProperty('POM_REPOSITORIES') ? getProperty('POM_REPOSITORIES').split(',') : ['']

        }
    }
}

def getDistDownloadUrl() {
    return hasProperty('POM_DIST_DOWNLOAD_URL') ? POM_DIST_DOWNLOAD_URL : ''
}

static def getJavaAPISpecificationLink() {
    if (JavaVersion.current().isJava10Compatible()) {
        return 'https://docs.oracle.com/javase/10/docs/api/overview-summary.html'
    } else if (JavaVersion.current().isJava9()) {
        return 'https://docs.oracle.com/javase/9/docs/api/overview-summary.html'
    } else if (JavaVersion.current().isJava8()) {
        return 'https://docs.oracle.com/javase/8/docs/api/'
    } else if (JavaVersion.current().isJava7()) {
        return 'https://docs.oracle.com/javase/7/docs/api/'
    } else if (JavaVersion.current().isJava6()) {
        return 'https://docs.oracle.com/javase/6/docs/api/'
    } else if (JavaVersion.current().isJava5()) {
        return 'https://docs.oracle.com/javase/1.5.0/docs/api/'
    } else {
        return ''
    }
}

static def downloadLib(url, path, version, name) {
    File file = new File("${System.properties['user.home']}/.m2/repository/${path}/${version}/${name}")
    file.parentFile.mkdirs()
    if (!file.exists()) {
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOutputStream ->
                fileOutputStream << downloadStream
            }
        }
    }
}

afterEvaluate { project ->
    def dokkaFatJarVersion = '0.9.17'
    def dokkaFatJarPath = 'org/jetbrains/dokka/dokka-fatjar'
    def pomName = getPomName()
    def pomPackaging = getPomPackaging()
    def pomDescription = getPomDescription()
    def pomUniqueVersion = getPomUniqueVersion()
    def pomUrl = getPomUrl()
    def pomInceptionYear = getPomInceptionYear()
    def pomScmUrl = getPomScmUrl()
    def pomScmConnection = getPomScmConnection()
    def pomScmDevConnection = getPomScmDevConnection()
    def pomScmTag = getPomScmTag()
    def pomLicenseName = getPomLicenseName()
    def pomLicenseUrl = getPomLicenseUrl()
    def pomDistribution = getPomLicenseDist()
    def pomLicenseComments = getPomLicenseComments()
    def pomOrg = getOrg()
    def pomOrgUrl = getOrgUrl()
    def pomDeveloperId = getDeveloperId()
    def pomDeveloperName = getDeveloperName()
    def pomDeveloperEmail = getDeveloperEmail()
    def pomDeveloperUrl = getDeveloperUrl()
    def pomDeveloperOrg = getDeveloperOrg()
    def pomDeveloperOrgUrl = getDeveloperOrgUrl()
    def pomDeveloperRoles = getDeveloperRoles()
    def pomDeveloperTimezone = getDeveloperTimezone()
    def pomDevelopers = getDevelopers()
    def pomContributors = getContributors()
    def pomIssueSystem = getIssueSystem()
    def pomIssueSystemUrl = getIssueSystemUrl()
    def pomCiSystem = getCiSystem()
    def pomCiSystemUrl = getCiSystemUrl()
    def pomMailingLists = getMailingLists()
    def pomRepositories = getRepositories()
    def pomDistDownloadUrl = getDistDownloadUrl()
    def pomPackagingConfig = {
        packaging pomPackaging
    }
    def pomConfig = {
        url pomUrl
        if (pomInceptionYear != '') {
            inceptionYear pomInceptionYear
        }

        if ((pomOrg != '') || (pomOrgUrl != '')) {
            organization {
                if (pomOrg != '') {
                    name pomOrg
                }
                if (pomOrgUrl != '') {
                    url pomOrgUrl
                }
            }
        }

        licenses {
            license {
                name pomLicenseName
                url pomLicenseUrl
                distribution pomDistribution
                if (pomLicenseComments != '') {
                    comments pomLicenseComments
                }
            }
        }

        developers {
            developer {
                id pomDeveloperId
                name pomDeveloperName
                email pomDeveloperEmail
                if (pomDeveloperUrl != '') {
                    url pomDeveloperUrl
                }
                if (pomDeveloperOrg != '') {
                    organization pomDeveloperOrg
                }
                if (pomDeveloperOrgUrl != '') {
                    organizationUrl pomDeveloperOrgUrl
                }
                if (pomDeveloperRoles.size() > 0) {
                    roles {
                        for (int i = 0; i < pomDeveloperRoles.size(); i++) {
                            role pomDeveloperRoles[i]
                        }
                    }
                }
                if (pomDeveloperTimezone != '') {
                    timezone pomDeveloperTimezone
                }
            }
            for (int i = 0; i + 2 < pomDevelopers.size(); i += 3) {
                developer {
                    id pomDevelopers[i]
                    name pomDevelopers[i + 1]
                    email pomDevelopers[i + 2]
                }
            }
        }

        if (pomContributors.size() > 1) {
            contributors {
                for (int i = 0; i + 1 < pomContributors.size(); i += 2) {
                    contributor {
                        name pomContributors[i]
                        email pomContributors[i + 1]
                    }
                }
            }
        }

        if (pomMailingLists.size() > 2) {
            mailingLists {
                for (int i = 0; i + 2 < pomMailingLists.size(); i += 3) {
                    mailingList {
                        name pomMailingLists[i]
                        subscribe pomMailingLists[i + 1]
                        unsubscribe pomMailingLists[i + 2]
                    }
                }
            }
        }

        scm {
            connection pomScmConnection
            developerConnection pomScmDevConnection
            tag pomScmTag
            url pomScmUrl
        }

        if ((pomIssueSystem != '') || (pomIssueSystemUrl != '')) {
            issueManagement {
                if (pomIssueSystem != '') {
                    system pomIssueSystem
                }
                if (pomIssueSystemUrl != '') {
                    url pomIssueSystemUrl
                }
            }
        }

        if ((pomCiSystem != '') || (pomCiSystemUrl != '')) {
            ciManagement {
                if (pomCiSystem != '') {
                    system pomCiSystem
                }
                if (pomCiSystemUrl != '') {
                    url pomCiSystemUrl
                }
            }
        }

        if (pomDistDownloadUrl != '') {
            distributionManagement {
                downloadUrl pomDistDownloadUrl
            }
        }
    }
    def projectDokkaJavadocTask = !isDokkaPlugin() ? null : project.tasks.find {
        it.name == 'dokkaJavadoc'
    }
    def projectDokkaAndroidJavadocTask = !isDokkaPlugin() ? null : project.tasks.find {
        it.name == 'dokkaAndroidJavadoc'
    }

    task dokkaInitializer {
        downloadLib("https://jcenter.bintray.com/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.pom",
                dokkaFatJarPath, dokkaFatJarVersion, "dokka-fatjar-${dokkaFatJarVersion}.pom")
        downloadLib("https://jcenter.bintray.com/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar",
                dokkaFatJarPath, dokkaFatJarVersion, "dokka-fatjar-${dokkaFatJarVersion}.jar")
    }

    signing {
        required {
            isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives')
        }
        sign configurations.archives
    }

    uploadArchives {
        description 'Deploys the artifacts to the Maven Central repository.'
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                pom.groupId = getPomGroupId()
                pom.artifactId = getPomArtifactId()
                pom.version = getPomVersionName()

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    uniqueVersion = pomUniqueVersion

                    name pomName
                    description pomDescription

                    if (pomRepositories.size() > 1) {
                        repositories {
                            for (int i = 0; i + 1 < pomRepositories.size(); i += 2) {
                                repository {
                                    id pomRepositories[i]
                                    url pomRepositories[i + 1]
                                }
                            }
                        }
                    }
                }

                pom.withXml {
                    def root = asNode()
                    def name = root.name
                    def description = root.description
                    if (root.packaging.size() == 1) {
                        root.remove(root.packaging)
                    }
                    root.remove(root.name)
                    root.remove(root.description)
                    root.children().last() + pomPackagingConfig
                    root.append(name)
                    root.append(description)
                    root.children().last() + pomConfig
                    if (root.dependencies.size() == 1) {
                        def dependencies = root.dependencies
                        root.remove(root.dependencies)
                        root.append(dependencies)
                    }
                    if (root.repositories.size() == 1) {
                        def repositories = root.repositories
                        root.remove(root.repositories)
                        root.append(repositories)
                    }
                }
            }
        }
    }

    task installArchives(type: Upload) {
        description 'Deploys the artifacts to the local Maven repository.'
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                pom.groupId = getPomGroupId()
                pom.artifactId = getPomArtifactId()
                pom.version = getPomVersionName()

                repository url: "file://${System.properties['user.home']}/.m2/repository"

                pom.project {
                    uniqueVersion = pomUniqueVersion

                    name pomName
                    description pomDescription

                    if (pomRepositories.size() > 1) {
                        repositories {
                            for (int i = 0; i + 1 < pomRepositories.size(); i += 2) {
                                repository {
                                    id pomRepositories[i]
                                    url pomRepositories[i + 1]
                                }
                            }
                        }
                    }
                }

                pom.withXml {
                    def root = asNode()
                    def name = root.name
                    def description = root.description
                    if (root.packaging.size() == 1) {
                        root.remove(root.packaging)
                    }
                    root.remove(root.name)
                    root.remove(root.description)
                    root.children().last() + pomPackagingConfig
                    root.append(name)
                    root.append(description)
                    root.children().last() + pomConfig
                    if (root.dependencies.size() == 1) {
                        def dependencies = root.dependencies
                        root.remove(root.dependencies)
                        root.append(dependencies)
                    }
                    if (root.repositories.size() == 1) {
                        def repositories = root.repositories
                        root.remove(root.repositories)
                        root.append(repositories)
                    }
                }
            }
        }
    }

    if (isAndroid()) {
        task install(type: Upload, dependsOn: assemble) {
            description 'Installs the artifacts to the local Maven repository.'
            repositories {
                mavenInstaller {
                    configuration = configurations.archives

                    pom.groupId = getPomGroupId()
                    pom.artifactId = getPomArtifactId()
                    pom.version = getPomVersionName()

                    pom.project {
                        name pomName
                        description pomDescription

                        if (pomRepositories.size() > 1) {
                            repositories {
                                for (int i = 0; i + 1 < pomRepositories.size(); i += 2) {
                                    repository {
                                        id pomRepositories[i]
                                        url pomRepositories[i + 1]
                                    }
                                }
                            }
                        }
                    }

                    pom.withXml {
                        def root = asNode()
                        def name = root.name
                        def description = root.description
                        if (root.packaging.size() == 1) {
                            root.remove(root.packaging)
                        }
                        root.remove(root.name)
                        root.remove(root.description)
                        root.children().last() + pomPackagingConfig
                        root.append(name)
                        root.append(description)
                        root.children().last() + pomConfig
                        if (root.dependencies.size() == 1) {
                            def dependencies = root.dependencies
                            root.remove(root.dependencies)
                            root.append(dependencies)
                        }
                        if (root.repositories.size() == 1) {
                            def repositories = root.repositories
                            root.remove(root.repositories)
                            root.append(repositories)
                        }
                    }
                }
            }
        }

        if (getApklibArtifact()) {
            task apklib(type: Zip) {
                appendix = extension = 'apklib'

                from 'AndroidManifest.xml'
                into('res') {
                    from 'res'
                }
                into('src') {
                    from 'src'
                }
            }
        }

        if (isDokka()) {
            if ((projectDokkaAndroidJavadocTask == null) && (projectDokkaJavadocTask == null)) {
                task androidDokka(type: Exec, dependsOn: dokkaInitializer) {
                    def srcDirsNumber = android.sourceSets.main.java.srcDirs.size()
                    def classpathNumber = android.getBootClasspath().size()
                    def classpath = (classpathNumber > 0) ? android.getBootClasspath()[0] : ''
                    def javaAPISpecificationLink = getJavaAPISpecificationLink()
                    if (srcDirsNumber > 0) {
                        commandLine 'java', '-jar',
                                "${System.properties['user.home']}/.m2/repository/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar",
                                android.sourceSets.main.java.srcDirs[0],
                                (srcDirsNumber == 2) ? android.sourceSets.main.java.srcDirs[1] : '',
                                (srcDirsNumber == 3) ? android.sourceSets.main.java.srcDirs[2] : '',
                                '-output', "${buildDir}/javadoc", '-format', 'javadoc',
                                (classpathNumber > 0) ? '-classpath' : '', (classpathNumber > 0) ? classpath : '',
                                '-links', "https://developer.android.com/reference/^${android.sdkDirectory}/docs/reference/^${javaAPISpecificationLink}"
                    } else {
                        commandLine 'java', '-jar',
                                "${System.properties['user.home']}/.m2/repository/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar"
                    }
                }
            }

            if (projectDokkaAndroidJavadocTask != null) {
                task projectDokkaAndroidJavadocTaskJar(type: Jar, dependsOn: projectDokkaAndroidJavadocTask) {
                    classifier = 'javadoc'
                    from projectDokkaAndroidJavadocTask.outputDirectory
                }
            } else if (projectDokkaJavadocTask != null) {
                task projectDokkaJavadocTaskJar(type: Jar, dependsOn: projectDokkaJavadocTask) {
                    classifier = 'javadoc'
                    from projectDokkaJavadocTask.outputDirectory
                }
            } else {
                task androidDokkaJar(type: Jar, dependsOn: androidDokka) {
                    classifier = 'javadoc'
                    from "${buildDir}/javadoc"
                }
            }
        } else {
            task androidJavadocs(type: Javadoc) {
                source = android.sourceSets.main.java.srcDirs
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                options {
                    linksOffline 'https://developer.android.com/reference/', "${android.sdkDirectory}/docs/reference/"
                }
                failOnError = false
                exclude '**/*.kt', '**/R.html', '**/R.*.html'
            }

            task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                classifier = 'javadoc'
                from androidJavadocs.destinationDir
            }
        }

        if (isKotlin()) {
            task androidKotlinSourcesJar(type: Jar) {
                classifier = 'sources'
                from android.sourceSets.main.java.sourceFiles
                from 'src/main/kotlin'
            }
        } else {
            task androidSourcesJar(type: Jar) {
                classifier = 'sources'
                from android.sourceSets.main.java.sourceFiles
            }
        }

        artifacts {
            if (getApklibArtifact()) {
                archives apklib
            }
            if (isDokka()) {
                if (projectDokkaAndroidJavadocTask != null) {
                    archives projectDokkaAndroidJavadocTaskJar
                } else if (projectDokkaJavadocTask != null) {
                    archives projectDokkaJavadocTaskJar
                } else {
                    archives androidDokkaJar
                }
            } else {
                archives androidJavadocsJar
            }
            if (isKotlin()) {
                archives androidKotlinSourcesJar
            } else {
                archives androidSourcesJar
            }
        }
    } else {
        install {
            description 'Installs the artifacts to the local Maven repository.'
            repositories {
                mavenInstaller {
                    configuration = configurations.archives

                    pom.groupId = getPomGroupId()
                    pom.artifactId = getPomArtifactId()
                    pom.version = getPomVersionName()

                    pom.project {
                        name pomName
                        description pomDescription

                        if (pomRepositories.size() > 1) {
                            repositories {
                                for (int i = 0; i + 1 < pomRepositories.size(); i += 2) {
                                    repository {
                                        id pomRepositories[i]
                                        url pomRepositories[i + 1]
                                    }
                                }
                            }
                        }
                    }

                    pom.withXml {
                        def root = asNode()
                        def name = root.name
                        def description = root.description
                        if (root.packaging.size() == 1) {
                            root.remove(root.packaging)
                        }
                        root.remove(root.name)
                        root.remove(root.description)
                        root.children().last() + pomPackagingConfig
                        root.append(name)
                        root.append(description)
                        root.children().last() + pomConfig
                        if (root.dependencies.size() == 1) {
                            def dependencies = root.dependencies
                            root.remove(root.dependencies)
                            root.append(dependencies)
                        }
                        if (root.repositories.size() == 1) {
                            def repositories = root.repositories
                            root.remove(root.repositories)
                            root.append(repositories)
                        }
                    }
                }
            }
        }

        if (isDokka()) {
            if ((projectDokkaAndroidJavadocTask == null) && (projectDokkaJavadocTask == null)) {
                task coreDokka(type: Exec, dependsOn: dokkaInitializer) {
                    def srcDirsNumber = sourceSets.main.java.srcDirs.size()
                    def javaAPISpecificationLink = getJavaAPISpecificationLink()
                    if (srcDirsNumber > 0) {
                        commandLine 'java', '-jar',
                                "${System.properties['user.home']}/.m2/repository/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar",
                                sourceSets.main.java.srcDirs[0],
                                (srcDirsNumber == 2) ? sourceSets.main.java.srcDirs[1] : '',
                                (srcDirsNumber == 3) ? sourceSets.main.java.srcDirs[2] : '',
                                '-output', "${buildDir}/javadoc", '-format', 'javadoc',
                                '-links', "${javaAPISpecificationLink}"
                    } else {
                        commandLine 'java', '-jar',
                                "${System.properties['user.home']}/.m2/repository/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar"
                    }
                }
            }

            if (projectDokkaJavadocTask != null) {
                task coreProjectDokkaJavadocTaskJar(type: Jar, dependsOn: projectDokkaJavadocTask) {
                    classifier = 'javadoc'
                    from projectDokkaJavadocTask.outputDirectory
                }
            } else if (projectDokkaAndroidJavadocTask != null) {
                task coreProjectDokkaAndroidJavadocTaskJar(type: Jar, dependsOn: projectDokkaAndroidJavadocTask) {
                    classifier = 'javadoc'
                    from projectDokkaAndroidJavadocTask.outputDirectory
                }
            } else {
                task dokkaJar(type: Jar, dependsOn: coreDokka) {
                    classifier = 'javadoc'
                    from "${buildDir}/javadoc"
                }
            }
        } else {
            task coreJavadoc(type: Javadoc) {
                source = sourceSets.main.java.srcDirs
                failOnError = false
                exclude '**/*.kt'
            }

            task javadocJar(type: Jar, dependsOn: coreJavadoc) {
                classifier = 'javadoc'
                from javadoc.destinationDir
            }
        }

        if (isKotlin()) {
            task kotlinSourcesJar(type: Jar, dependsOn: classes) {
                classifier = 'sources'
                from sourceSets.main.allSource
                from 'src/main/kotlin'
            }
        } else {
            task sourcesJar(type: Jar, dependsOn: classes) {
                classifier = 'sources'
                from sourceSets.main.allSource
            }
        }

        artifacts {
            if (isDokka()) {
                if (projectDokkaJavadocTask != null) {
                    archives coreProjectDokkaJavadocTaskJar
                } else if (projectDokkaAndroidJavadocTask != null) {
                    archives coreProjectDokkaAndroidJavadocTaskJar
                } else {
                    archives dokkaJar
                }
            } else {
                archives javadocJar
            }
            if (isKotlin()) {
                archives kotlinSourcesJar
            } else {
                archives sourcesJar
            }
        }
    }

    tasks.withType(Javadoc).all {
        options.encoding = getJavadocEncoding()
        options.docEncoding = getJavadocDocEncoding()
        options.charSet = getJavadocCharSet()
        options.author = true
        options.version = true
        options.addStringOption('link', getJavaAPISpecificationLink())
        if (JavaVersion.current().isJava8Compatible()) {
            if (isAndroid()) {
                /* JDK 1.8 has a bug that requires the rt.jar file to be
                   in the bootclasspath (https://stackoverflow.com/a/30458820). */
                options.bootClasspath = [file("${System.properties['java.home']}/jre/lib/rt.jar")] + android.bootClasspath
            }
            if (!getDoclintCheck()) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
            if (JavaVersion.current().isJava9Compatible()) {
                if (isHtml5()) {
                    options.addBooleanOption('html5', true)
                } else {
                    options.addBooleanOption('html4', true)
                }
            }
        }
    }
}